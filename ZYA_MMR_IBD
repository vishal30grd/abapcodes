TYPE-POOLS : slis.

INCLUDE zya_mmi_inb_copy_t.
INCLUDE zya_mmi_inb_copy_s.
INCLUDE zya_mmi_inb_copy_f.


START-OF-SELECTION.
  PERFORM get_data.
  IF it_final IS NOT INITIAL.
    PERFORM display_data.
  ELSE.
    MESSAGE 'Data Not Found' TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.


*&---------------------------------------------------------------------*
*& Include          ZYA_MMI_INBDISPLAY_D
*&---------------------------------------------------------------------*

TABLES: likp, mara, lips, ekko, ekpo, t001l.

TYPES: BEGIN OF ty_final.
         INCLUDE STRUCTURE likp.
TYPES:   netwr1              TYPE vfkp-netwr,
         netwr2              TYPE vfkp-netwr,
         tdlnr               TYPE lfa1-name1,             "vttk-tdlnr,    
         vgbel               TYPE lips-vgbel,
         posnr               TYPE lips-posnr,
         vgpos               TYPE lips-vgpos,
         matnr               TYPE lips-matnr,
         groes               TYPE mara-groes,
         arktx               TYPE lips-arktx,
         lgobe               TYPE t001l-lgobe,
         lfimg               TYPE lips-lfimg,
         ormng               TYPE lips-ormng,
         anti_dump           TYPE p LENGTH 16 DECIMALS 4,    "prcd_elements-kwert,                    "konp-kbetr,   "Anti-Dumping Duty Cost %
         count_duty          TYPE p LENGTH 16 DECIMALS 4,    "prcd_elements-kbetr,   "Countervailing Duty Cost %
         duty_cost           TYPE p LENGTH 16 DECIMALS 4,                    "konp-kbetr,   "Duty Cost %
         unit_drayege        TYPE p LENGTH 16 DECIMALS 4,                    "vfkp-netwr,   "Unit Drayage Cost
         unit_freight        TYPE p LENGTH 16 DECIMALS 4,                    "vfkp-netwr,   "Unit Freight Cost
         brok_cost           TYPE p LENGTH 16 DECIMALS 4,                    "konp-kbetr,   "Brokerage Cost %
         mpf                 TYPE p LENGTH 16 DECIMALS 4,                    "konp-kbetr,   "MPF %
         hmf                 TYPE p LENGTH 16 DECIMALS 4,                    "konp-kbetr,   "HMF %
         zvbelv              TYPE lips-vbelv,
         exposed_date        TYPE lips-exposed_date, "Exposed Date
         dir_unitcost        TYPE ekpo-netpr,   "Direct Unit Cost
         exposed_to_wms_line TYPE lips-exposed_to_wms_line,
         netpr               TYPE ekpo-netpr,
         fob                 TYPE char10,          
       END OF ty_final.


DATA: it_final      TYPE TABLE OF ty_final,
      wa_final      TYPE ty_final.

DATA : it_fcat TYPE slis_t_fieldcat_alv,
       wa_fcat TYPE slis_fieldcat_alv,
       wa_layo TYPE slis_layout_alv.


*&---------------------------------------------------------------------*
*& Include          ZYA_MMI_INBDISPLAY_S
*&---------------------------------------------------------------------*
SELECTION-SCREEN: BEGIN OF BLOCK b1 WITH FRAME.

  SELECT-OPTIONS : s_plant  FOR lips-werks.   " OBLIGATORY.      
  SELECT-OPTIONS : s_lgort  FOR lips-lgort.   " OBLIGATORY.      
  SELECT-OPTIONS : s_contno FOR likp-zzcontainer_no.
  SELECT-OPTIONS : s_bolnr  FOR likp-bolnr.
  SELECT-OPTIONS : s_inb    FOR likp-vbeln.
  SELECT-OPTIONS : s_idate  FOR likp-lfdat.
  SELECT-OPTIONS : s_cdate  FOR likp-erdat.
  SELECT-OPTIONS : s_podoc  FOR lips-vgbel.
  SELECT-OPTIONS : s_supp   FOR likp-lifnr.
  SELECT-OPTIONS : s_sinv   FOR likp-verur.
  SELECT-OPTIONS : s_matnr  FOR lips-matnr.


SELECTION-SCREEN: END OF BLOCK b1.



*&---------------------------------------------------------------------*
*& Include          ZYA_MMI_INB_F
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Form GET_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
  DATA: lv_brgew TYPE lips-brgew.

  DATA: it_allocvalueschar TYPE bapi1003_alloc_values_char OCCURS 0 WITH HEADER LINE,
        it_allocvaluescurr TYPE bapi1003_alloc_values_curr OCCURS 0 WITH HEADER LINE,
        it_allocvaluesnum  TYPE bapi1003_alloc_values_num  OCCURS 0 WITH HEADER LINE,
        it_return          TYPE  bapiret2 OCCURS 0 WITH HEADER LINE,
        gv_customer        TYPE bapi1003_key-object.

  SELECT likp~vbeln, likp~zzcontainer_no, likp~lifnr, likp~zship_city, likp~zship_state, likp~zloc_code, likp~zcont_type, likp~zexfact_date, likp~status, likp~zsail_date,
         likp~zoeta_dis_port, likp~zoeta_dis_dest, likp~zetadisc_port, likp~zata_dis_port, likp~zetadest_port, likp~zata_des_port,
         likp~zetafin_date, likp~zpick_up_dat, likp~zarr_dat, likp~zadd_dr_cost, likp~zseal, likp~zshipplia, likp~zshipping, likp~zvoyage,
         likp~zvessel, likp~bolnr, likp~zbl_date, likp~zport_load, likp~zport_dis, likp~zcont_size, likp~zasn_cust, likp~zcci, likp~erdat,
         likp~ernam, likp~zgateout, likp~zwms, likp~zefcode, likp~zcust_ent_no, likp~zhbl, likp~zpstlz, likp~zconsig, likp~zfinal_dest,
         likp~zgatein_dat, likp~verur, likp~zcust_inv_no,

         lips~werks, lips~vgbel, lips~posnr, lips~vgpos, lips~matnr, lips~arktx, lips~lfimg, lips~ormng, lips~vbelv, lips~exposed_date,
         lips~exposed_to_wms_line, lips~lgort, lips~brgew

         FROM likp AS likp
         INNER JOIN lips AS lips
         ON likp~vbeln = lips~vbeln
         WHERE lips~vbeln IN @s_inb
          AND  lips~vgbel IN @s_podoc
          AND  lips~werks IN @s_plant
          AND  lips~matnr IN @s_matnr
          AND  lips~lgort IN @s_lgort
          AND  lips~pstyv = 'ELN'
          AND  likp~zzcontainer_no IN @s_contno
          AND  likp~lfdat IN @s_idate
          AND  likp~erdat IN @s_cdate
          AND  likp~bolnr IN @s_bolnr
          AND  likp~lifnr IN @s_supp
          AND  likp~verur IN @s_sinv
          AND  likp~lfart = 'EL'

          INTO TABLE @DATA(it_likp_lips).

  IF it_likp_lips IS NOT INITIAL.
    SORT it_likp_lips BY vbeln posnr.

    SELECT matnr, groes
      FROM mara
      INTO TABLE @DATA(it_mara)
      FOR ALL ENTRIES IN @it_likp_lips
      WHERE matnr = @it_likp_lips-matnr.

    IF it_mara IS NOT INITIAL.
      SORT it_mara BY matnr.
    ENDIF.

    SELECT lgort, lgobe
      FROM t001l
      INTO TABLE @DATA(it_t001l)
      FOR ALL ENTRIES IN @it_likp_lips
      WHERE lgort = @it_likp_lips-lgort.

    IF it_t001l IS NOT INITIAL.
      SORT it_t001l BY lgort.
    ENDIF.

    SELECT ebeln, ebelp, netpr
      FROM ekpo
      INTO TABLE @DATA(it_ekpo)
      FOR ALL ENTRIES IN @it_likp_lips
      WHERE ebeln = @it_likp_lips-vgbel.
*      AND ebelp   = @it_likp_lips-vgpos.

    IF it_ekpo IS NOT INITIAL.
      SORT it_ekpo BY ebeln ebelp.
    ENDIF.

    SELECT ebeln, bukrs, knumv
      FROM ekko
      INTO TABLE @DATA(it_ekko)
      FOR ALL ENTRIES IN @it_likp_lips
      WHERE ebeln = @it_likp_lips-vgbel
      AND bukrs   = '3000'.

    IF it_ekko IS NOT INITIAL.
      SORT it_ekko BY ebeln .
    ENDIF.

    IF it_ekko IS NOT INITIAL.
      SELECT knumv, kposn, kschl, kbetr
        FROM prcd_elements
        INTO TABLE @DATA(it_prcd_elements)
        FOR ALL ENTRIES IN @it_ekko
        WHERE knumv = @it_ekko-knumv
        AND kschl IN ( 'ZYMP', 'ZYHM' , 'ZYDC' , 'ZYCD', 'ZYBC' , 'ZYAD' ).

      IF it_prcd_elements IS NOT INITIAL.
        SORT it_prcd_elements BY knumv kposn kschl.
      ENDIF.
    ENDIF.


    SELECT vbeln, kunnr
      FROM vbak
      INTO TABLE @DATA(it_vbak)
      FOR ALL ENTRIES IN @it_likp_lips
      WHERE vbeln = @it_likp_lips-vbelv.

    IF it_vbak IS NOT INITIAL.
      SORT it_vbak BY vbeln.
    ENDIF.


    SELECT signi, exti2, shtyp, tdlnr, tknum
        FROM vttk
        INTO TABLE @DATA(it_vttk)
        FOR ALL ENTRIES IN @it_likp_lips
        WHERE signi = @it_likp_lips-zzcontainer_no
*        AND exti2 = @it_likp_lips-bolnr
        AND shtyp IN ( 'ZY01', 'ZY02', 'ZY04' ).

    IF it_vttk IS NOT INITIAL.
      SORT it_vttk BY signi exti2 shtyp.

      SELECT rebel, knumv, netwr
        FROM vfkp
        INTO TABLE @DATA(it_vfkp1)
        FOR ALL ENTRIES IN @it_vttk
        WHERE rebel = @it_vttk-tknum.

      IF it_vfkp1 IS NOT INITIAL.
        SORT it_vfkp1 BY rebel.

        SELECT knumv, kbetr
          FROM prcd_elements
          INTO TABLE @DATA(it_prcd_elements_vf)
          FOR ALL ENTRIES IN @it_vfkp1
          WHERE knumv = @it_vfkp1-knumv.

        IF it_prcd_elements_vf IS NOT INITIAL.
          SORT it_prcd_elements_vf BY knumv.
        ENDIF.
      ENDIF.

      SELECT lifnr, name1
        FROM lfa1
        INTO TABLE @DATA(it_lfa1)
        FOR ALL ENTRIES IN @it_vttk
        WHERE lifnr = @it_vttk-tdlnr.

      IF it_lfa1 IS NOT INITIAL.
        SORT it_lfa1 BY lifnr.
      ENDIF.

    ENDIF.

  ENDIF.


  LOOP AT it_likp_lips INTO DATA(lwa_likp_lips).

    READ TABLE it_ekko INTO DATA(wa_ekko2) WITH KEY ebeln = lwa_likp_lips-vgbel .    "BUKRS check
    IF sy-subrc = 0.

      wa_final-zzcontainer_no =  lwa_likp_lips-zzcontainer_no.
      wa_final-vbeln          =  lwa_likp_lips-vbeln.
      wa_final-lifnr          =  lwa_likp_lips-lifnr.
      wa_final-zship_city     =  lwa_likp_lips-zship_city.
      wa_final-zship_state    =  lwa_likp_lips-zship_state.
      wa_final-zloc_code      =  lwa_likp_lips-zloc_code.
      wa_final-zcont_type     =  lwa_likp_lips-zcont_type.
      wa_final-zexfact_date   =  lwa_likp_lips-zexfact_date.
      wa_final-status         =  lwa_likp_lips-status.
      wa_final-zsail_date     =  lwa_likp_lips-zsail_date.
      wa_final-zoeta_dis_port =  lwa_likp_lips-zoeta_dis_port.
      wa_final-zoeta_dis_dest =  lwa_likp_lips-zoeta_dis_dest.
      wa_final-zetadisc_port  =  lwa_likp_lips-zetadisc_port.
      wa_final-zata_dis_port  =  lwa_likp_lips-zata_dis_port.
      wa_final-zetadest_port  =  lwa_likp_lips-zetadest_port.
      wa_final-zata_des_port  =  lwa_likp_lips-zata_des_port.
      wa_final-zetafin_date   =  lwa_likp_lips-zetafin_date.
      wa_final-zpick_up_dat   =  lwa_likp_lips-zpick_up_dat.
      wa_final-zarr_dat       =  lwa_likp_lips-zarr_dat.
      wa_final-zadd_dr_cost   =  lwa_likp_lips-zadd_dr_cost.
      wa_final-zseal          =  lwa_likp_lips-zseal.
      wa_final-zshipplia      =  lwa_likp_lips-zshipplia.
      wa_final-zshipping      =  lwa_likp_lips-zshipping.
      wa_final-zvoyage        =  lwa_likp_lips-zvoyage.
      wa_final-zvessel        =  lwa_likp_lips-zvessel.
      wa_final-bolnr          =  lwa_likp_lips-bolnr.
      wa_final-zbl_date       =  lwa_likp_lips-zbl_date.
      wa_final-zport_load     =  lwa_likp_lips-zport_load.
      wa_final-zport_dis      =  lwa_likp_lips-zport_dis.
      wa_final-zcont_size     =  lwa_likp_lips-zcont_size.
      wa_final-zasn_cust      =  lwa_likp_lips-zasn_cust.
      wa_final-zcci           =  lwa_likp_lips-zcci.
      wa_final-erdat          =  lwa_likp_lips-erdat.
      wa_final-ernam          =  lwa_likp_lips-ernam.
      wa_final-zgateout       =  lwa_likp_lips-zgateout.
      wa_final-zwms           =  lwa_likp_lips-zwms.
      wa_final-zefcode        =  lwa_likp_lips-zefcode.
      wa_final-zcust_ent_no   =  lwa_likp_lips-zcust_ent_no.
      wa_final-zhbl           =  lwa_likp_lips-zhbl.
      wa_final-zpstlz         =  lwa_likp_lips-zpstlz.
      wa_final-zconsig        =  lwa_likp_lips-zconsig.
      wa_final-zfinal_dest    =  lwa_likp_lips-zfinal_dest.
      wa_final-zgatein_dat    =  lwa_likp_lips-zgatein_dat.
      wa_final-verur          =  lwa_likp_lips-verur.
      wa_final-zcust_inv_no   =  lwa_likp_lips-zcust_inv_no.
      wa_final-werks          =  lwa_likp_lips-werks.
      wa_final-vgbel          =  lwa_likp_lips-vgbel.
      wa_final-posnr          =  lwa_likp_lips-posnr.
      wa_final-vgpos          =  lwa_likp_lips-vgpos.
      wa_final-matnr          =  lwa_likp_lips-matnr.
      wa_final-arktx          =  lwa_likp_lips-arktx.
      wa_final-lfimg          =  lwa_likp_lips-lfimg.
      wa_final-ormng          =  lwa_likp_lips-ormng.
      wa_final-zvbeln         =  lwa_likp_lips-vbelv.
      wa_final-exposed_date         =  lwa_likp_lips-exposed_date.
      wa_final-exposed_to_wms_line  =  lwa_likp_lips-exposed_to_wms_line.

*****Freight Cost
      READ TABLE it_vttk INTO DATA(wa_vttk2) WITH KEY signi = lwa_likp_lips-zzcontainer_no
                                                           exti2 = lwa_likp_lips-bolnr
                                                           shtyp = 'ZY04' BINARY SEARCH.
      IF sy-subrc = 0.
        READ TABLE it_vfkp1 INTO DATA(wa_vfkp12) WITH KEY rebel = wa_vttk2-tknum BINARY SEARCH.
        IF sy-subrc = 0.

          READ TABLE it_prcd_elements_vf INTO DATA(wa_prcd_elements_vf) WITH KEY knumv = wa_vfkp12-knumv BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-netwr1 = wa_prcd_elements_vf-kbetr.
          ENDIF.
        ENDIF.

      ENDIF.

      IF wa_final-netwr1 IS INITIAL.
        READ TABLE it_vttk INTO DATA(wa_vttk) WITH KEY signi = lwa_likp_lips-zzcontainer_no
                                                       exti2 = lwa_likp_lips-bolnr
                                                       shtyp = 'ZY01' BINARY SEARCH.
        IF sy-subrc = 0.
          READ TABLE it_vfkp1 INTO DATA(wa_vfkp1) WITH KEY rebel = wa_vttk-tknum BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-netwr1 = wa_vfkp1-netwr.
          ENDIF.

        ENDIF.
      ENDIF.

*..Drayage cost

      READ TABLE it_vttk INTO DATA(wa_vttk3) WITH KEY signi = lwa_likp_lips-zzcontainer_no
                                                             exti2 = lwa_likp_lips-bolnr
                                                             shtyp = 'ZY02' BINARY SEARCH.
      IF sy-subrc = 0.
        READ TABLE it_vfkp1 INTO DATA(wa_vfkp3) WITH KEY rebel = wa_vttk3-tknum BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-netwr2 = wa_vfkp3-netwr.
        ENDIF.

        READ TABLE it_lfa1 INTO DATA(wa_lfa1) WITH KEY lifnr = wa_vttk3-tdlnr BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-tdlnr = wa_lfa1-name1.
        ENDIF.

      ENDIF.


      READ TABLE it_mara INTO DATA(wa_mara) WITH KEY matnr = lwa_likp_lips-matnr BINARY SEARCH.
      IF sy-subrc = 0.
        wa_final-groes = wa_mara-groes.
      ENDIF.

      READ TABLE it_t001l INTO DATA(wa_t001l) WITH KEY lgort  = lwa_likp_lips-lgort BINARY SEARCH.
      IF sy-subrc = 0.
        wa_final-lgobe = wa_t001l-lgobe.
      ENDIF.

      READ TABLE it_ekpo INTO DATA(wa_ekpo) WITH KEY ebeln  = lwa_likp_lips-vgbel
                                                     ebelp  = lwa_likp_lips-vgpos BINARY SEARCH.
      IF sy-subrc = 0.
        wa_final-netpr = wa_ekpo-netpr.
      ENDIF.

      wa_final-zto_pro_cost     = wa_final-netpr  * lwa_likp_lips-lfimg.       "++ By Ashish On 23.12.2023
      wa_final-zton_pro_cost    = wa_final-netpr  * lwa_likp_lips-lfimg.


*-------------------SOA by Ashish Bhagat on 22.12.2023------------------

      READ TABLE it_ekko INTO DATA(wa_ekko) WITH KEY ebeln = lwa_likp_lips-vgbel BINARY SEARCH.
      IF sy-subrc = 0.
        READ TABLE it_prcd_elements INTO DATA(wa_prcd_elements) WITH KEY knumv = wa_ekko-knumv
                                                                         kposn = lwa_likp_lips-vgpos
                                                                         kschl = 'ZYAD' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-anti_dump = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

        READ TABLE it_prcd_elements INTO wa_prcd_elements WITH KEY knumv = wa_ekko-knumv
                                                                   kposn = lwa_likp_lips-vgpos
                                                                   kschl = 'ZYBC' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-brok_cost = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

        READ TABLE it_prcd_elements INTO wa_prcd_elements WITH KEY knumv = wa_ekko-knumv
                                                                   kposn = lwa_likp_lips-vgpos
                                                                   kschl = 'ZYCD' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-count_duty = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

        READ TABLE it_prcd_elements INTO wa_prcd_elements WITH KEY knumv = wa_ekko-knumv
                                                                   kposn = lwa_likp_lips-vgpos
                                                                   kschl = 'ZYDC' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-duty_cost = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

        READ TABLE it_prcd_elements INTO wa_prcd_elements WITH KEY knumv = wa_ekko-knumv
                                                                   kposn = lwa_likp_lips-vgpos
                                                                   kschl = 'ZYHM' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-hmf = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

        READ TABLE it_prcd_elements INTO wa_prcd_elements WITH KEY knumv = wa_ekko-knumv
                                                                  kposn = lwa_likp_lips-vgpos
                                                                  kschl = 'ZYMP' BINARY SEARCH.
        IF sy-subrc = 0.
          wa_final-mpf = wa_prcd_elements-kbetr.
        ENDIF.
        CLEAR: wa_prcd_elements.

      ENDIF.

      CLEAR: lv_brgew.

      READ TABLE it_likp_lips INTO DATA(wa_lips21) WITH KEY vbeln = lwa_likp_lips-vbeln BINARY SEARCH .
      IF sy-subrc = 0.
        LOOP AT it_likp_lips INTO DATA(wa_lips2) FROM sy-tabix.
          IF ( wa_lips2-vbeln NE wa_lips21-vbeln ).
            EXIT.
          ENDIF.
          lv_brgew  = lv_brgew + wa_lips2-brgew.
          CLEAR: wa_lips2.
        ENDLOOP.
      ENDIF.

      IF lv_brgew NE 0.
*          .....Unit Freight Cost & Unit Drayage Cost
        wa_final-unit_freight =  ( lwa_likp_lips-brgew / lv_brgew )  *  wa_final-netwr1.       "Freight Cost
        wa_final-unit_drayege =  ( lwa_likp_lips-brgew / lv_brgew )  *  wa_final-netwr2.       "Drayage Cost
      ENDIF.


      IF lwa_likp_lips-vbelv IS NOT INITIAL.
        READ TABLE it_vbak INTO DATA(wa_vbak) WITH KEY vbeln = lwa_likp_lips-vbelv BINARY SEARCH.
        IF sy-subrc = 0.
          CLEAR:  gv_customer.

          gv_customer = wa_vbak-kunnr.
          IF gv_customer IS NOT INITIAL.
            CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
              EXPORTING
                objectkey       = gv_customer
                objecttable     = 'KNA1'
                classnum        = 'ZYOHTA_CLASS'
                classtype       = '011'
                keydate         = sy-datum
                language        = sy-langu
              TABLES
                allocvaluesnum  = it_allocvaluesnum
                allocvalueschar = it_allocvalueschar
                allocvaluescurr = it_allocvaluescurr
                return          = it_return.

            IF sy-subrc = 0.
              IF it_allocvalueschar IS NOT INITIAL.

                LOOP AT it_allocvalueschar.
                  IF it_allocvalueschar-charact  = 'ZYOH_FOBCUSTOMER'  .
                    IF it_allocvalueschar-value_char_long = 'TRUE'.
                      wa_final-fob = 'FOB'.
                    ELSE.
                      wa_final-fob = 'NON-FOB'.
                    ENDIF.
                  ENDIF.
                ENDLOOP.

              ENDIF.
            ENDIF.

          ENDIF.
        ENDIF.

      ELSE.
        wa_final-fob = 'WH'.
      ENDIF.

      IF wa_final-fob IS INITIAL.
        wa_final-fob = 'NON-FOB'.
      ENDIF.

      REFRESH:  it_allocvaluesnum[],  it_allocvalueschar[], it_allocvaluescurr[], it_return[].
      CLEAR: gv_customer.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_final-zvbeln
        IMPORTING
          output = wa_final-zvbeln.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_final-lifnr
        IMPORTING
          output = wa_final-lifnr.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_final-vbeln
        IMPORTING
          output = wa_final-vbeln.

      APPEND wa_final TO it_final.

    ENDIF. "it_ekko
    CLEAR: lwa_likp_lips, wa_final.
  ENDLOOP.


  IF it_final IS NOT INITIAL.
    SORT it_final BY werks vbeln.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form DISPLAY_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_data .

  PERFORM build_fcat_row USING:

  'IT_FINAL' 'WERKS'                   ''   'Plant'                                 ''     ''        '8'   ,
  'IT_FINAL' 'ZZCONTAINER_NO'          ''   'Container No'                          ''     ''        '25'   ,
  'IT_FINAL' 'VBELN'                   'X'   'Inbound Delivery'                      ''     ''        '15'   ,
  'IT_FINAL' 'POSNR'                   ''   'Inbound Delivery Item'                 ''     ''        '15'   ,
  'IT_FINAL' 'LIFNR'                   ''   'Vendor No.'                            ''     ''        '15'   ,
  'IT_FINAL' 'ZSHIP_CITY'              ''   'Ship to City'                          ''     ''        '15'   ,
  'IT_FINAL' 'ZSHIP_STATE'             ''   'Ship to State'                         ''     ''        '15'   ,
  'IT_FINAL' 'ZLOC_CODE'               ''   'Location Code'                         ''     ''        '15'   ,
  'IT_FINAL' 'ZCONT_TYPE'              ''   'Container Type'                        ''     ''        '10'   ,
  'IT_FINAL' 'ZEXFACT_DATE'            ''   'Ex.Factory Date'                       ''     ''        '12'   ,
  'IT_FINAL' 'STATUS'                  ''   'Status'                                ''     ''        '8'   ,
  'IT_FINAL' 'ZSAIL_DATE'              ''   'Sailing Date'                          ''     ''        '12'   ,
  'IT_FINAL' 'ZOETA_DIS_PORT'          ''   'Original ETA Discharge Port'           ''     ''        '15'   ,
  'IT_FINAL' 'ZOETA_DIS_DEST'          ''   'Original ETA Discharge Destination'    ''     ''        '15'   ,
  'IT_FINAL' 'ZETADISC_PORT'           ''   'ETA Discharge Port'                    ''     ''        '15'   ,
  'IT_FINAL' 'ZATA_DIS_PORT'           ''   'ATA Discharge Port'                    ''     ''        '15'   ,
  'IT_FINAL' 'ZETADEST_PORT'           ''   'ETA Port of Destination'               ''     ''        '15'   ,
  'IT_FINAL' 'ZATA_DES_PORT'           ''   'ATA Destination Port'                  ''     ''        '15'   ,
  'IT_FINAL' 'ZETAFIN_DATE'            ''   'ATA Final Destination'                 ''     ''        '15'   ,
  'IT_FINAL' 'ZPICK_UP_DAT'            ''   'Pick Up Date'                          ''     ''        '12'   ,
  'IT_FINAL' 'ZARR_DAT'                ''   'Arrival Date'                          ''     ''        '12'   ,
  'IT_FINAL' 'ZADD_DR_COST'            ''   'Additional Drayage Cost'               ''     ''        '20'   ,
  'IT_FINAL' 'ZTO_PRO_COST'            ''   'Total Product Cost'                    ''     ''        '20'   ,
  'IT_FINAL' 'ZTON_PRO_COST'           ''   'Total Net Product Cost'                ''     ''        '20'   ,
  'IT_FINAL' 'ZSEAL'                   ''   'Seal'                                  ''     ''        '8'   ,
  'IT_FINAL' 'ZSHIPPLIA'               ''   'Shipping Line Alias'                   ''     ''        '10'   ,
  'IT_FINAL' 'ZSHIPPING'               ''   'Shipping Line'                         ''     ''        '10'   ,
  'IT_FINAL' 'ZVOYAGE'                 ''   'Voyage No.'                            ''     ''        '10'   ,
  'IT_FINAL' 'ZVESSEL'                 ''   'Vessel No.'                            ''     ''        '10'   ,
  'IT_FINAL' 'BOLNR'                   ''   'BOL No.'                               ''     ''        '20'   ,
  'IT_FINAL' 'ZBL_DATE'                ''   'BOL Date/Time'                         ''     ''        '12'   ,
  'IT_FINAL' 'ZPORT_LOAD'              ''   'Port of Loading'                       ''     ''        '15'   ,
  'IT_FINAL' 'ZPORT_DIS'               ''   'Port of Discharge'                     ''     ''        '15'   ,
  'IT_FINAL' 'ZCONT_SIZE'              ''   'Container Size'                        ''     ''        '10'   ,
  'IT_FINAL' 'ZASN_CUST'               ''   'ASN to Custmer'                        ''     ''        '15'   ,
  'IT_FINAL' 'ZCCI'                    ''   'CCI Sent'                              ''     ''        '10'   ,
  'IT_FINAL' 'ERDAT'                   ''   'Date Created'                          ''     ''        '12'   ,
  'IT_FINAL' 'ERNAM'                   ''   'Created by Interface'                  ''     ''        '10'   ,
  'IT_FINAL' 'ZGATEOUT'                ''   'Gate Out'                              ''     ''        '12'   ,
  'IT_FINAL' 'ZWMS'                    ''   'Exposed to WMS'                        ''     ''        '14'   ,
  'IT_FINAL' 'ZVBELN'                  ''   'Sales Order No'                        ''     ''        '12'   ,
  'IT_FINAL' 'ZEFCODE'                 ''   'EF Code'                               ''     ''        '10'   ,
  'IT_FINAL' 'ZCUST_ENT_NO'            ''   'Customs Entry No.'                     ''     ''        '10'   ,
  'IT_FINAL' 'ZHBL'                    ''   'H-BOL'                                 ''     ''        '10'   ,
  'IT_FINAL' 'ZPSTLZ'                  ''   'Zip Code'                              ''     ''        '8'   ,
  'IT_FINAL' 'ZCONSIG'                 ''   'Consignee'                             ''     ''        '8'   ,
  'IT_FINAL' 'FOB'                     ''   'FOB'                                   ''     ''        '15'   ,
  'IT_FINAL' 'ZFINAL_DEST'             ''   'FDN'                                   ''     ''        '10'   ,
  'IT_FINAL' 'ZGATEIN_DAT'             ''   'Gate In Date'                          ''     ''        '12'   ,
  'IT_FINAL' 'VERUR'                   ''   'External Document No'                  ''     ''        '17'   ,
  'IT_FINAL' 'ZCUST_INV_NO'            ''   'Custom Invoice No.'                    ''     ''        '17'   ,
  'IT_FINAL' 'NETWR1'                  ''   'Freight Cost'                          ''     ''        '20'   ,
  'IT_FINAL' 'NETWR2'                  ''   'Drayage Cost'                          ''     ''        '20'   ,
  'IT_FINAL' 'TDLNR'                   ''   'Drayage Vendor Name'                   ''     ''        '40'   ,
  'IT_FINAL' 'VGBEL'                   ''    'PO No.'                               ''     ''        '12'   ,
  'IT_FINAL' 'VGPOS'                   ''    'PO Item'                              ''     ''        '5'   ,
  'IT_FINAL' 'MATNR'                   ''    'Material No'                        'LIPS' 'MATNR'     '40'   ,
  'IT_FINAL' 'GROES'                   ''    'Size'                                 ''     ''        '15'   ,
  'IT_FINAL' 'ARKTX'                   ''    'Material Description'               'LIPS' 'ARKTX'     '40'   ,
  'IT_FINAL' 'LGOBE'                   ''    'Location Code'                        ''     ''        '15'   ,
  'IT_FINAL' 'LFIMG'                   ''   'Quantity'                              ''     ''        '20'   ,
  'IT_FINAL' 'ORMNG'                   ''   'Quantity Allocated'                    ''     ''        '20'   ,
  'IT_FINAL' 'ANTI_DUMP'               ''   'Anti-Dumping Duty Cost %'              ''     ''        '20'   ,
  'IT_FINAL' 'COUNT_DUTY'              ''    'Countervailing Duty Cost %'           ''     ''        '20'   ,
  'IT_FINAL' 'DUTY_COST'               ''   'Duty Cost %'                           ''     ''        '20'   ,
  'IT_FINAL' 'UNIT_DRAYEGE'            ''    'Unit Drayage Cost'                    ''     ''        '20'   ,
  'IT_FINAL' 'UNIT_FREIGHT'            ''    'Unit Freight Cost'                    ''     ''        '20'   ,
  'IT_FINAL' 'BROK_COST'               ''    'Brokerage Cost %'                     ''     ''        '20'   ,
  'IT_FINAL' 'MPF'                     ''    'MPF %'                                ''     ''        '20'   ,
  'IT_FINAL' 'HMF'                     ''    'HMF %'                                ''     ''        '20'   ,
*  'IT_FINAL' 'zvbelv'                 ''     'Sales Order No'    '69'. "           ''     ''        ''   ,
  'IT_FINAL' 'EXPOSED_DATE'            ''    'Exposed Date'                         ''     ''        '12'   ,
  'IT_FINAL' 'NETPR'                   ''    'Direct Unit Cost'                     ''     ''        '10'   ,
  'IT_FINAL' 'EXPOSED_TO_WMS_LINE'     ''   'Exposed to WMS Line'                  ''     ''         '20'   .

*  wa_layo-zebra     =  'X'.
  wa_layo-colwidth_optimize  =  'X'.

  PERFORM alv_display.


ENDFORM.


FORM build_fcat_row  USING    VALUE(p_tabname)
                              VALUE(p_fieldname)
                              VALUE(p_hotspot)
                              VALUE(p_seltext)
                              VALUE(p_reftab)
                              VALUE(p_reffield)
                              VALUE(p_len).


  wa_fcat-tabname   = p_tabname.
  wa_fcat-fieldname = p_fieldname.
  wa_fcat-hotspot = p_hotspot.
  wa_fcat-seltext_l = p_seltext.
  wa_fcat-ref_tabname = p_reftab.
  wa_fcat-ref_fieldname = p_reffield.
  wa_fcat-outputlen = p_len.

  APPEND wa_fcat TO it_fcat.
  CLEAR wa_fcat.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form ALV_DISPLAY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_display .


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_callback_user_command  = 'USER_COMMAND'
      is_layout                = wa_layo
      it_fieldcat              = it_fcat
    TABLES
      t_outtab                 = it_final
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'ZGUI'.
ENDFORM.

FORM user_command USING ucomm LIKE sy-ucomm
                        selfield TYPE slis_selfield.
  CASE selfield-fieldname.
    WHEN 'VBELN'.
      READ TABLE it_final INDEX selfield-tabindex INTO DATA(lwa_output).
      IF sy-subrc EQ 0.
        SET PARAMETER ID 'VLM' FIELD lwa_output-vbeln.
        CALL TRANSACTION 'VL33N' AND SKIP FIRST SCREEN.
      ENDIF.

      CLEAR: selfield.
  ENDCASE.

ENDFORM.
